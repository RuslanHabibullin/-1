import tkinter as tk
from tkinter import messagebox
import os
import random

class TicTacToeGame:
    def __init__(self):
        self.current_player = "X"
        self.board = [["", "", ""],
                      ["", "", ""],
                      ["", "", ""]]

        self.window = tk.Tk()
        self.window.title("Крестики-нолики")

        self.buttons = []
        for row in range(3):
            button_row = []
            for col in range(3):
                button = tk.Button(self.window, text="", width=10, height=5, command=lambda row=row, col=col: self.make_move(row, col))
                button.grid(row=row, column=col)
                button_row.append(button)
            self.buttons.append(button_row)

    def make_move(self, row, col):
        if self.board[row][col] == "":
            self.board[row][col] = self.current_player
            self.buttons[row][col].config(text=self.current_player)

            if self.check_winner(self.current_player):
                messagebox.showinfo("Победитель", f"Игрок {self.current_player} победил!")
                self.reset()
            elif self.check_draw():
                messagebox.showinfo("Ничья", "Ничья!")
                self.reset()
            else:
                self.switch_player()
                self.make_computer_move()

    def switch_player(self):
        self.current_player = "O" if self.current_player == "X" else "X"

    def check_winner(self, player):
        for i in range(3):
            if self.board[i][0] == self.board[i][1] == self.board[i][2] == player or self.board[0][i] == self.board[1][i] == self.board[2][i] == player:
                return True
        if self.board[0][0] == self.board[1][1] == self.board[2][2] == player or self.board[0][2] == self.board[1][1] == self.board[2][0] == player:
            return True
        return False

    def check_draw(self):
        for row in self.board:
            if "" in row:
                return False
        return True

    def make_computer_move(self):
        available_moves = []
        for row in range(3):
            for col in range(3):
                if self.board[row][col] == "":
                    available_moves.append((row, col))

        if available_moves:
            row, col = random.choice(available_moves)
            self.board[row][col] = self.current_player
            self.buttons[row][col].config(text=self.current_player)

            if self.check_winner(self.current_player):
                messagebox.showinfo("Победитель", f"Игрок {self.current_player} победил!")
                self.reset()
            elif self.check_draw():
                messagebox.showinfo("Ничья", "Ничья!")
                self.reset()
            else:
                self.switch_player()

    def reset(self):
        self.current_player = "X"
        self.board = [["", "", ""],
                      ["", "", ""],
                      ["", "", ""]]

        for row in self.buttons:
            for button in row:
                button.config(text="")


class RegistrationWindow:
    def __init__(self, filename):
        self.filename = filename

        self.window = tk.Tk()
        self.window.resizable(width=False,height=False)
        self.window['bg'] = "gray10"
        self.window.geometry('500x200')
        self.window.title("Регистрация")


        self.username_label = tk.Label(self.window, text="Логин:",bg="gray10", fg="gray99")
        self.username_label.place(relx = 0.45,rely = 0.02)


        self.username_entry = tk.Entry(self.window,bg='#fff', fg='#444')
        self.username_entry.place(width = 166, relx = 0.33, rely = 0.15)

        self.password_label = tk.Label(self.window, text="Пароль:", bg="gray10",fg="gray99")
        self.password_label.place(relx = 0.45, rely = 0.28)

        self.password_entry = tk.Entry(self.window, show="*",bg='#fff', fg='#444')
        self.password_entry.place(width = 166, relx = 0.33, rely = 0.4)

        self.register_button = tk.Button(self.window, text="Зарегистрироваться/Войти", command=self.register, bg="gray14",fg = "gray99")
        self.register_button.place(width = 200, relx = 0.3, rely = 0.6)

    def shifr(self, message1):
        alfavit_EU = 'ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ'
        smeshenie = 4
        itog = ''
        message = message1.upper()
        for i in message:
            mesto = alfavit_EU.find(i)
            new_mesto = mesto + smeshenie
            if i in alfavit_EU:
                itog += alfavit_EU[new_mesto]
            else:
                itog += i
        print(itog)
        return itog
    def register(self):
        username = self.username_entry.get()
        password1 = self.password_entry.get()
        password = self.shifr(password1)

        if not username or not password:
            messagebox.showerror("Ошибка", "Введите логин и пароль")
            return

        # Проверяем, есть ли логин и пароль в файле
        with open(self.filename, "r") as f:
            lines = f.readlines()
            for line in lines:
                saved_username, saved_password = line.strip().split(",")
                if username == saved_username and password == saved_password:
                    messagebox.showinfo("Успех", "Авторизация прошла успешно")
                    self.window.destroy()
                    game = TicTacToeGame()
                    tk.mainloop()
                    return
                elif username.upper().replace(' ','') == "ВАСЯПУПКИН":
                    for i in range(5):
                        messagebox.showinfo("Предупреждение", f"Вы{' точно '*i} уверены что хотите это имя пользователя")
                    messagebox.showinfo("Ошибка", "Пользователь с таким логином является администратором")

                    return
                elif username == saved_username:
                    messagebox.showinfo("Ошибка", "Пользователь с таким логином уже существует")

                    return
        with open(self.filename, "a") as f:
            f.write(f"{username},{password}\n")
            messagebox.showinfo("Успех", "Добро пожаловать\nРегистрация прошла успешно")
            self.window.destroy()
            game = TicTacToeGame()
            tk.mainloop()
            return

    def run(self):
        self.window.mainloop()



if os.path.isfile("users2.txt"):
    registration_window = RegistrationWindow("users.txt")
else:
    myfile = open("users2.txt", "x")
    registration_window = RegistrationWindow("users1.txt")



registration_window.run()
